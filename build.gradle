if (!hasProperty('buildProfile')) ext.buildProfile =  'arquillian-container-chameleon-wf12-remote'
logger.quiet "using buildProfile=${buildProfile}; to use a different profile , use this command line: \
 'gradle build -PbuildProfile=arquillian-container-chameleon-wf12-remote' oder 'arquillian-container-chameleon-payara5-managed' \
 or  'gradle build -PbuildProfile=arquillian-container-chameleon-payara5-managed' "
logger.quiet "my Project dir is: ${projectDir}"
if (!hasProperty('wildflyInstallDir')) ext.wildflyInstallDir =  System.env.HOME + '/swe_projects/wildfly-13.0.0.Beta1'
logger.quiet "using Wildfly at : ${wildflyInstallDir}/"

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'war'
//apply plugin: 'com.bmuschko.cargo'


group = 'org.arquillian.example'
version = '1.0-SNAPSHOT'

description = """arquillian-tutorial-gradle"""

sourceCompatibility = 1.8
targetCompatibility = 1.8
tasks.withType(JavaCompile) {
	options.encoding = 'UTF-8'
}
repositories {
	mavenLocal()
 	mavenCentral()
   //maven { url "http://repo.maven.apache.org/maven2" }
     
}

configurations { 
    wildfly // is's a custom configuration, see https://docs.gradle.org/current/userguide/managing_dependency_configurations.html
    // nedded to be able to define ' wildfly "org.wildfly:wildfly-dist:11.0.0.Final@zip"' and by 'zipTree(configurations.wildfly.singleFile)'
}


task resolveWildfly(type: Copy) {// only for case "arquillian-wildfly-embedded": by 'test.dependsOn resolveWildfly'
    destinationDir = file("bin") //see src/mein/resources/arquillian.xml which expects ${project.baseDir}/bin/wildfly-11.0.0.Final to be there
     
    from { 
    		zipTree(configurations.wildfly.singleFile) 
    } 
}
resolveWildfly.onlyIf {
  //download and unpack wildfly zip only if it does not yet exist use README.txt as a indication. 
  // be aware that wildfly-11.0.0.Final/standalone/configuration/standalone.xml will be modified by wildfly itself during restart, so the timestamp 
  // of that file will constantly change. This why we need this "onlyIf" here.
  !file("${projectDir}/bin/wildfly-11.0.0.Final/README.txt").exists() 
} 


clean.doFirst {
    
	logger.quiet "#########cleanWar.doFirst"
	delete "${buildDir}/"+war.archiveName
    delete "${wildflyInstallDir}/standalone/deployments/${war.archiveName}"
    logger.quiet "#########YOU NEED TO STOP THE SERVER FOR THIS!!#########"
    logger.quiet "#########tidy up MyWildfly: delete from ${libsDir.getPath()} and ${wildflyInstallDir}/standalone/deployments/${war.archiveName}"
    delete "${wildflyInstallDir}/standalone/data"
    delete "${wildflyInstallDir}/standalone/tmp"
    logger.quiet "#########tidy up  MyWildfly:${wildflyInstallDir}/standalone/data and  ${wildflyInstallDir}/standalone/tmp"
   
    copy {
        from  "${wildflyInstallDir}/standalone/configuration/standalone_xml_history/standalone.initial.xml"
        into  "${wildflyInstallDir}/standalone/configuration/"
        rename { fileName ->
    				fileName == "standalone.initial.xml" ? "standalone.xml" : fileName;
  		}    
  		 logger.quiet "#########tidy up MyWildfly: restore original standalone.xml"
    }
}



dependencies {
     providedCompile group: 'javax', name: 'javaee-api', version: '8.0'
       
     
       
     testCompile group: 'junit', name: 'junit', version:'4.12'
     
     testCompile group: 'javax.persistence', name: 'javax.persistence-api', version: '2.2'
     testCompile group: 'com.h2database', name: 'h2', version:'1.4.196'
     testCompile group: 'org.hibernate', name: 'hibernate-core', version: '5.2.13.Final'
     testCompile group: 'org.jboss.resteasy', name: 'resteasy-client', version: '3.5.0.Final'
     testCompile group: 'org.jboss.resteasy', name: 'resteasy-jackson-provider', version: '3.5.0.Final'
     
     if (false){
       testCompile 'org.apache.johnzon:johnzon:1.1.7'
       testCompile 'org.apache.johnzon:johnzon-mapper:1.1.7'
       testCompile 'org.apache.johnzon:johnzon-core:1.1.7'
       testCompile 'org.apache.johnzon:johnzon-jaxrs:1.1.7'
       testCompile 'org.apache.johnzon:johnzon-jsonb:1.1.7'
       testCompile group: 'org.apache.geronimo.specs', name: 'geronimo-json_1.1_spec', version: '1.0'
       testCompile group: 'org.apache.geronimo.specs', name: 'geronimo-jsonb_1.0_spec', version: '1.0'
     } else {
       //testCompile 'org.eclipse:yasson:1.0.2-SNAPSHOT'  
        testCompile 'org.eclipse:yasson:1.0.1'
        testCompile 'javax.json.bind:javax.json.bind-api:1.0'   
        testCompile group: 'org.glassfish', name: 'javax.json', version: '1.1.2' 
     }

    
     if (false){
  	    testCompile 'org.glassfish.jersey.core:jersey-client:2.25.1'
  	    testCompile 'org.glassfish.jersey.media:jersey-media-json-processing:2.25.1'
  	    testCompile 'com.fasterxml.jackson.jaxrs:jackson-jaxrs-json-provider:2.9.1'
  	    testCompile 'org.glassfish.jersey.media:jersey-media-json-jackson:2.25.1'	    
     }

    switch ( buildProfile ) {
     	case "arquillian-wildfly-managed": logger.info "dep wildfly-managed";
     	    //A managed container is similar to a remote container, except its lifecycle (startup/shutdown) is also managed by Arquillian. 
     	     wildfly "org.wildfly:wildfly-dist:11.0.0.Final@zip"
     		testCompile group: 'org.wildfly.arquillian', name: 'wildfly-arquillian-container-managed', version: '2.1.0.Final'
     		testCompile group: 'org.jboss.arquillian.junit', name: 'arquillian-junit-container' , version: '1.1.15.Final'
			test.systemProperties = ['arquillian.launch': 'wildfly-managed' ] // needed by src/mein/resources/arquillian.xml
			break;
		case "arquillian-wildfly-remote": logger.info "dep wildfly-remote"; 
		    
     		testCompile group: 'org.wildfly.arquillian', name: 'wildfly-arquillian-container-remote', version: '2.1.0.Final'
     		testCompile group: 'org.jboss.arquillian.junit', name: 'arquillian-junit-container' , version: '1.1.15.Final'
			test.systemProperties = ['arquillian.launch': 'wildfly-remote' ] // needed by src/mein/resources/arquillian.xml
			break;	
		case "arquillian-wildfly-embedded": logger.info "dep wildfly-embedded"; 
			//An embedded container resides in the same JVM and is mostly likely managed by Arquillian.
			wildfly "org.wildfly:wildfly-dist:11.0.0.Final@zip"
     		testCompile group: 'org.wildfly.arquillian', name: 'wildfly-arquillian-container-embedded', version: '2.1.0.Final'
     	    testCompile group: 'org.jboss.arquillian.junit', name: 'arquillian-junit-container' , version: '1.1.15.Final'
			test.systemProperties = ['arquillian.launch': 'wildfly-embedded' , 
				'java.util.logging.manager':'org.jboss.logmanager.LogManager',
				'project.baseDir': projectDir 
				] // needed by src/mein/resources/arquillian.xml
			test.dependsOn resolveWildfly
			break;	
		case "arquillian-container-chameleon-wf12-remote": logger.info "***************************dep arquillian-container-chameleon-wf12-remote"; 
			//http://www.lordofthejars.com/2016/09/arquillian-chameleon-for-sake-of.html
    		testCompile group: 'org.arquillian.container', name: 'arquillian-container-chameleon', version: '1.0.0.CR1'
     		testCompile group: 'org.arquillian.container', name: 'arquillian-chameleon-junit-container-starter', version: '1.0.0.CR1'
    		testCompile group: 'org.jboss.logmanager', name: 'jboss-logmanager', version: '2.0.9.Final'
			test.systemProperties = ['arquillian.launch': 'container-chameleon-wf12-remote',
	 		                         'java.util.logging.manager':'org.jboss.logmanager.LogManager'		    					
				] // needed by src/mein/resources/arquillian.xml
			break;	

		case "arquillian-container-chameleon-payara5-managed": logger.info "***************************dep arquillian-container-chameleon-payara5"; 
			//http://www.lordofthejars.com/2016/09/arquillian-chameleon-for-sake-of.html
    		testCompile group: 'org.arquillian.container', name: 'arquillian-container-chameleon', version: '1.0.0.CR1'
     		testCompile group: 'org.arquillian.container', name: 'arquillian-chameleon-junit-container-starter', version: '1.0.0.CR1'
     		testCompile group: 'org.jboss.logmanager', name: 'jboss-logmanager', version: '2.0.9.Final'
			test.systemProperties = ['arquillian.launch': 'container-chameleon-payara5-managed',
	 		                         'java.util.logging.manager':'org.jboss.logmanager.LogManager'		    					
				] // needed by src/mein/resources/arquillian.xml
			break;	
		case "arquillian-container-chameleon-payara5-remote": logger.info "***************************dep arquillian-container-chameleon-payara5"; 
			//http://www.lordofthejars.com/2016/09/arquillian-chameleon-for-sake-of.html
     		testCompile group: 'org.arquillian.container', name: 'arquillian-container-chameleon', version: '1.0.0.CR1'
     		testCompile group: 'org.arquillian.container', name: 'arquillian-chameleon-junit-container-starter', version: '1.0.0.CR1'
     		testCompile group: 'org.jboss.logmanager', name: 'jboss-logmanager', version: '2.0.9.Final'
			test.systemProperties = ['arquillian.launch': 'container-chameleon-payara5-remote',
			                         'java.util.logging.manager':'org.jboss.logmanager.LogManager'		    					
				] // needed by src/mein/resources/arquillian.xml
			logger.quiet "################you need a running payara5 server on your machine!################"
			break;	
     	case "arquillian-weld-embedded":
     	    // this config works only for Integrationtests, that uses CDI only, but NOT JPA and NOT JAX-RS
     	 	testCompile group: 'org.jboss.arquillian.container', name: 'arquillian-weld-ee-embedded-1.1', version: '1.0.0.Final'
     	 	testCompile group: 'org.jboss.arquillian.junit', name: 'arquillian-junit-container' , version: '1.1.15.Final'
     		testCompile group: 'org.jboss.weld', name: 'weld-core', version: '2.4.5.Final';
     		testCompile group: 'org.jboss.logmanager', name: 'jboss-logmanager' , version: '2.1.0.Final';
   
     		test.systemProperties = ['arquillian.launch': 'weld-embedded'			    					
				] // needed by src/main/resources/arquillian.xml
			//test.dependsOn resolveWildfly
     		break;
     	
     		 
     }
}
war {
        webInf { 
             from ( 'src/main/resources' )  {
        			into('classes/META-INF') 
        		} 
        	switch ( buildProfile ) {
        		case "arquillian-container-chameleon-wf12-remote":
               rename { fileName ->
    				fileName == "persistence-integration-wildfly12.xml" ? "persistence.xml" : fileName;
  			   }
  			   break;
        	   case "arquillian-wildfly-remote":
               rename { fileName ->
    				fileName == "persistence-integration-wildfly12.xml" ? "persistence.xml" : fileName;
  			   }
  			   break;
  			case "arquillian-container-chameleon-payara5-managed": 
  			   rename { fileName ->
    				fileName == "persistence-integration-payara5.xml" ? "persistence.xml" : fileName;
  			   }
  			   break;
  			default:
  				logger.error "oh no no valid profile specified ${buildProfile}"
     		    throw new GradleException('!no valid profile specified');
  			}
         }
    doLast {
    	copy {
      	  println "Copy from ${libsDir.getPath()} into ${wildflyInstallDir}/standalone/deployments/"
      	  from war.archivePath
      	  into "${wildflyInstallDir}/standalone/deployments/"
      	  include "*.war"
    	}
   }
 }